# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ASW-C_IZFZZD4I_mgEcYnrVPGERgJ9AQ
"""

import os
from google.colab import drive

drive.mount('/content/drive')

os.chdir('/content/drive/My Drive/HackerFab')

! pip install pyngrok
! pip install gevent

from flask import Flask, request, render_template
from gevent.pywsgi import WSGIServer
app = Flask(__name__)
ngrok.set_auth_token("sensitive token here")
port_no = 5000
public_url =  ngrok.connect(port_no).public_url

@app.route("/")
def home():
    return "Hello girl"

print(f"To acces the Gloable link please click {public_url}")

if __name__ == '__main__':
  # Debug/Development
  #app.run(debug=True, port="5000")
  # Production
  http_server = WSGIServer(('', 5000), app)
  http_server.serve_forever()

from flask import Flask
from pyngrok import ngrok

from flask import Flask, request, render_template, redirect, url_for
from flask import send_file
import pandas as pd
from gevent.pywsgi import WSGIServer
app = Flask(__name__)
ngrok.set_auth_token("sensitive token here")
port_no = 5000
public_url =  ngrok.connect(port_no).public_url

#@app.route("/")
#def home():
    #return send_file("index.html")
#    return render_template("index.html")

@app.route("/", methods=['GET'])
def home():
    return render_template("index.html")

@app.route('/submit', methods=['POST'])
def process_form():
    if request.method == 'POST':
        # Process the form data and save it as a DataFrame
        data = {
            'Chip Number': request.form.get('chipNumber'),
            'Type of Process': request.form.get('processType'),
        }

        if request.form.get('processType') == 'pattern':
            data['Person'] = request.form.get('person')
            data['Date'] = request.form.get('date')
            data['Underlying Material'] = request.form.get('underlyingMaterial')
            data['Cleaning Step'] = request.form.get('cleaningStep')
            data['HMDS Prebake (Temp)'] = request.form.get('hmdsPrebakeTemp')
            data['HMDS Prebake (Time)'] = request.form.get('hmdsPrebakeTime')
            data['HMDS Spin Coat (Temp)'] = request.form.get('hmdsSpinCoatTemp')
            data['HMDS Spin Coat (Time)'] = request.form.get('hmdsSpinCoatTime')
            data['HMDS Bake (Temp)'] = request.form.get('hmdsBakeTemp')
            data['HMDS Bake (Time)'] = request.form.get('hmdsBakeTime')
            data['Photoresist Spincoat (Temp)'] = request.form.get('photoresistSpincoatTemp')
            data['Photoresist Spincoat (Time)'] = request.form.get('photoresistSpincoatTime')
            data['Photoresist Post Bake (Temp)'] = request.form.get('photoresistPostBakeTemp')
            data['Photoresist Post Bake (Time)'] = request.form.get('photoresistPostBakeTime')
            data['Exposure Patterns'] = request.form.get('exposurePatterns')
            data['Exposure Time'] = request.form.get('exposureTime')
            data['Develop Time'] = request.form.get('developTime')
        elif request.form.get('processType') == 'plasmaEtch':
            data['O2 Flow'] = request.form.get('o2Flow')
            data['SF6 Flow'] = request.form.get('sf6Flow')
            data['RF Flow'] = request.form.get('rfPower')
            data['Etch Time'] = request.form.get('etchTime')
            data['Etch Depth'] = request.form.get('etchDepth')

        df = pd.DataFrame(data, index=[0])

        # Append or create a CSV file with the data
        csv_filename = '/content/drive/My Drive/HackerFab/lab_data.csv'
        try:
            if not os.path.isfile(csv_filename):
                df.to_csv(csv_filename, index=False)
            else:
                existing_df = pd.read_csv(csv_filename)
                updated_df = pd.concat([existing_df, df], ignore_index=True)
                updated_df.to_csv(csv_filename, index=False)
        except Exception as e:
            print(f"Error saving CSV file: {str(e)}")

    return redirect(url_for('home'))
print(f"To acces the Gloable link please click {public_url}")

if __name__ == '__main__':
  # Debug/Development
  #app.run(debug=True, port="5000")
  # Production
  http_server = WSGIServer(('', 5000), app)
  http_server.serve_forever()


